<?php
/**
 * RsearchApi
 * PHP version 5
 *
 * @category Class
 * @package  RSearch\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ParallelStack RSearch API
 *
 * REST API Specification for ParallelStack RSearch API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@parallelstack.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RSearch\Client\RsearchClient;

use \RSearch\Client\ApiClient;
use \RSearch\Client\ApiException;
use \RSearch\Client\Configuration;
use \RSearch\Client\ObjectSerializer;

/**
 * RsearchApi Class Doc Comment
 *
 * @category Class
 * @package  RSearch\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RsearchApi
{
    /**
     * API Client
     *
     * @var \RSearch\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RSearch\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RSearch\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RSearch\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RSearch\Client\ApiClient $apiClient set the API client
     *
     * @return RsearchApi
     */
    public function setApiClient(\RSearch\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addDocument
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @param object $documentDetails Details of the document (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2005
     */
    public function addDocument($indexName, $docTypeName, $docId, $documentDetails)
    {
        list($response) = $this->addDocumentWithHttpInfo($indexName, $docTypeName, $docId, $documentDetails);
        return $response;
    }

    /**
     * Operation addDocumentWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @param object $documentDetails Details of the document (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentWithHttpInfo($indexName, $docTypeName, $docId, $documentDetails)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling addDocument');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling addDocument');
        }
        // verify the required parameter 'docId' is set
        if ($docId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docId when calling addDocument');
        }
        // verify the required parameter 'documentDetails' is set
        if ($documentDetails === null) {
            throw new \InvalidArgumentException('Missing the required parameter $documentDetails when calling addDocument');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }
        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                "{" . "doc_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($docId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($documentDetails)) {
            $_tempBody = $documentDetails;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2005',
                '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addDocumentType
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param object $docTypeDetails Details of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2011
     */
    public function addDocumentType($indexName, $docTypeName, $docTypeDetails)
    {
        list($response) = $this->addDocumentTypeWithHttpInfo($indexName, $docTypeName, $docTypeDetails);
        return $response;
    }

    /**
     * Operation addDocumentTypeWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param object $docTypeDetails Details of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2011, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentTypeWithHttpInfo($indexName, $docTypeName, $docTypeDetails)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling addDocumentType');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling addDocumentType');
        }
        // verify the required parameter 'docTypeDetails' is set
        if ($docTypeDetails === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeDetails when calling addDocumentType');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($docTypeDetails)) {
            $_tempBody = $docTypeDetails;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2011',
                '/indexes/{index_name}/document_types/{doc_type_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2011', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2011', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addIndex
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse201
     */
    public function addIndex($indexName)
    {
        list($response) = $this->addIndexWithHttpInfo($indexName);
        return $response;
    }

    /**
     * Operation addIndexWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function addIndexWithHttpInfo($indexName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling addIndex');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse201',
                '/indexes/{index_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse201', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse201', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDocument
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2006
     */
    public function deleteDocument($indexName, $docTypeName, $docId)
    {
        list($response) = $this->deleteDocumentWithHttpInfo($indexName, $docTypeName, $docId);
        return $response;
    }

    /**
     * Operation deleteDocumentWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentWithHttpInfo($indexName, $docTypeName, $docId)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling deleteDocument');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling deleteDocument');
        }
        // verify the required parameter 'docId' is set
        if ($docId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docId when calling deleteDocument');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }
        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                "{" . "doc_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($docId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2006',
                '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2006', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteIndex
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse202
     */
    public function deleteIndex($indexName)
    {
        list($response) = $this->deleteIndexWithHttpInfo($indexName);
        return $response;
    }

    /**
     * Operation deleteIndexWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIndexWithHttpInfo($indexName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling deleteIndex');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse202',
                '/indexes/{index_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse202', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse202', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAdvancedSearchResults
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the Document)type (required)
     * @param object $search Details of the search query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2007
     */
    public function getAdvancedSearchResults($indexName, $docTypeName, $search)
    {
        list($response) = $this->getAdvancedSearchResultsWithHttpInfo($indexName, $docTypeName, $search);
        return $response;
    }

    /**
     * Operation getAdvancedSearchResultsWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the Document)type (required)
     * @param object $search Details of the search query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvancedSearchResultsWithHttpInfo($indexName, $docTypeName, $search)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getAdvancedSearchResults');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling getAdvancedSearchResults');
        }
        // verify the required parameter 'search' is set
        if ($search === null) {
            throw new \InvalidArgumentException('Missing the required parameter $search when calling getAdvancedSearchResults');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($search)) {
            $_tempBody = $search;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2007',
                '/indexes/{index_name}/document_types/{doc_type_name}/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllDocumentTypes
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2002
     */
    public function getAllDocumentTypes($indexName)
    {
        list($response) = $this->getAllDocumentTypesWithHttpInfo($indexName);
        return $response;
    }

    /**
     * Operation getAllDocumentTypesWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllDocumentTypesWithHttpInfo($indexName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getAllDocumentTypes');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2002',
                '/indexes/{index_name}/document_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllDocuments
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2002
     */
    public function getAllDocuments($indexName, $docTypeName)
    {
        list($response) = $this->getAllDocumentsWithHttpInfo($indexName, $docTypeName);
        return $response;
    }

    /**
     * Operation getAllDocumentsWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllDocumentsWithHttpInfo($indexName, $docTypeName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getAllDocuments');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling getAllDocuments');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2002',
                '/indexes/{index_name}/document_types/{doc_type_name}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllIndexes
     *
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse200
     */
    public function getAllIndexes()
    {
        list($response) = $this->getAllIndexesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllIndexesWithHttpInfo
     *
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllIndexesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/indexes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse200',
                '/indexes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBasicSearchResults
     *
     * @param string $indexName Name of the index (required)
     * @param string $q Search Query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2007
     */
    public function getBasicSearchResults($indexName, $q)
    {
        list($response) = $this->getBasicSearchResultsWithHttpInfo($indexName, $q);
        return $response;
    }

    /**
     * Operation getBasicSearchResultsWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $q Search Query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasicSearchResultsWithHttpInfo($indexName, $q)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getBasicSearchResults');
        }
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling getBasicSearchResults');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2007',
                '/indexes/{index_name}/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2007', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocument
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2004
     */
    public function getDocument($indexName, $docTypeName, $docId)
    {
        list($response) = $this->getDocumentWithHttpInfo($indexName, $docTypeName, $docId);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @param string $docId Document ID (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo($indexName, $docTypeName, $docId)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getDocument');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling getDocument');
        }
        // verify the required parameter 'docId' is set
        if ($docId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docId when calling getDocument');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }
        // path params
        if ($docId !== null) {
            $resourcePath = str_replace(
                "{" . "doc_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($docId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2004',
                '/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2004', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2004', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentType
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2003
     */
    public function getDocumentType($indexName, $docTypeName)
    {
        list($response) = $this->getDocumentTypeWithHttpInfo($indexName, $docTypeName);
        return $response;
    }

    /**
     * Operation getDocumentTypeWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the document_type (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentTypeWithHttpInfo($indexName, $docTypeName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getDocumentType');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling getDocumentType');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2003',
                '/indexes/{index_name}/document_types/{doc_type_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIndex
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2001
     */
    public function getIndex($indexName)
    {
        list($response) = $this->getIndexWithHttpInfo($indexName);
        return $response;
    }

    /**
     * Operation getIndexWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexWithHttpInfo($indexName)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getIndex');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2001',
                '/indexes/{index_name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSuggestResults
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the Document_type (required)
     * @param string $q Details of the suggest query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return \RSearch\Client\RSearchModel\InlineResponse2008
     */
    public function getSuggestResults($indexName, $docTypeName, $q)
    {
        list($response) = $this->getSuggestResultsWithHttpInfo($indexName, $docTypeName, $q);
        return $response;
    }

    /**
     * Operation getSuggestResultsWithHttpInfo
     *
     * @param string $indexName Name of the index (required)
     * @param string $docTypeName Name of the Document_type (required)
     * @param string $q Details of the suggest query (required)
     * @throws \RSearch\Client\ApiException on non-2xx response
     * @return array of \RSearch\Client\RSearchModel\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestResultsWithHttpInfo($indexName, $docTypeName, $q)
    {
        // verify the required parameter 'indexName' is set
        if ($indexName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $indexName when calling getSuggestResults');
        }
        // verify the required parameter 'docTypeName' is set
        if ($docTypeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $docTypeName when calling getSuggestResults');
        }
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling getSuggestResults');
        }
        // parse inputs
        $resourcePath = "/indexes/{index_name}/document_types/{doc_type_name}/suggest";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // path params
        if ($indexName !== null) {
            $resourcePath = str_replace(
                "{" . "index_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($indexName),
                $resourcePath
            );
        }
        // path params
        if ($docTypeName !== null) {
            $resourcePath = str_replace(
                "{" . "doc_type_name" . "}",
                $this->apiClient->getSerializer()->toPathValue($docTypeName),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('auth_token');
        if (strlen($apiKey) !== 0) {
            $queryParams['auth_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-RSearch-App-ID');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-RSearch-App-ID'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RSearch\Client\RSearchModel\InlineResponse2008',
                '/indexes/{index_name}/document_types/{doc_type_name}/suggest'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RSearch\Client\RSearchModel\InlineResponse2008', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse2008', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RSearch\Client\RSearchModel\InlineResponse4007', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
